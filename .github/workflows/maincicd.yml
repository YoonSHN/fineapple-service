

name: Main CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  # =======================================================
  # 1. 빌드 및 도커 이미지 푸시 (Build & Push Docker Image)
  # =======================================================
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      # Spring Boot JAR 파일 생성
      - name: Build Spring Boot JAR
        run: |
          cd FineApple
          ./mvnw clean package -DskipTests
          cd ..

      # Docker Hub에 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Docker 이미지 빌드 및 푸시
      - name: Build and push Docker images
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/fineapple-spring-dev ./FineApple
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/fineapple-fastapi-dev ./fastapi-server
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/fineapple-batch-dev ./batch

          docker push ${{ secrets.DOCKERHUB_USERNAME }}/fineapple-spring-dev
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/fineapple-fastapi-dev
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/fineapple-batch-dev

  # =======================================================
  # 2. EC2 서버에 배포 (Deploy to EC2)
  # =======================================================
  deploy:
    # 'build' 작업이 성공해야만 'deploy' 작업을 실행
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to EC2 instance
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # EC2 인스턴스에서 실행할 명령어
            cd ~/fineapple-service
            
            # Docker Hub에서 최신 이미지를 받아옴
            docker-compose pull
            
            # 컨테이너를 내렸다가 최신 이미지로 다시 실행
            docker-compose down
            docker-compose up -d
            
            # 사용하지 않는 이전 도커 이미지를 정리
            docker image prune -f
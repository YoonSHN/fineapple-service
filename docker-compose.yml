version: "3.8"

services:
  spring:
    build:
      context: ./FineApple
      dockerfile: Dockerfile
    container_name: spring-server-dev
    ports:
      - "8080:8080"
    networks:
      - backend-net
    depends_on:
      - mysql-main
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql-main:3306/fineapple
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: 1234
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_PROFILES_ACTIVE: dev
    volumes:
      - ./FineApple/target:/app/target
      - ./FineApple/src:/app/src
      - ./FineApple/pom.xml:/app/pom.xml
      - ./FineApple/mvnw:/app/mvnw
      - ./FineApple/.mvn:/app/.mvn
      - ~/.m2:/root/.m2
      - nginx-upload-data:/app/uploads
      - spring-logs:/app/logs
      - ./nginx/static/html:/app/nginx/static/html
    command: ["./mvnw", "spring-boot:run"]

  mysql-main:
    image: mysql:8.4.3
    container_name: mysql-main-dev
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: 1234
      MYSQL_DATABASE: fineapple
      HOSTNAME: mysql-main
    ports:
      - "3306:3306"
    networks:
      - backend-net
    volumes:
      - mysql_main_data:/var/lib/mysql
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5

  fastapi:
    build: ./fastapi-server
    container_name: fastapi-server-dev
    ports:
      - "8000:8000"
    networks:
      - backend-net
      - elk-net
    depends_on:
      - mysql-main
    environment:
      HOSTNAME: fastapi-server
      UPSTAGE_API_KEY: ${UPSTAGE_API_KEY}
      DATABASE_URL: ${DATABASE_URL}
      ELASTICSEARCH_HOSTS: ${ES_HOST}
      DB_HOST: ${DB_HOST}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
    volumes:
      - ./fastapi-server:/app

  batch:
    build: ./batch
    container_name: batch-job-dev
    command: ["python", "predict_batch.py"]
    networks:
      - backend-net
    depends_on:
      fastapi:
        condition: service_started
      mysql-main:
          condition: service_healthy
    restart: "no"
    environment:
      HOSTNAME: batch-job
      DB_HOST: ${DB_HOST}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
    volumes:
      - ./batch:/app

#  redis:
#    image: redis:7.2
#    container_name: redis-server
#    ports:
#      - "6379:6379"
#    networks:
#      - backend-net

  nginx:
    build: ./nginx
    container_name: nginx-server-dev
    ports:
      - "80:80"
    volumes:
      - "./nginx/nginx.conf:/etc/nginx/nginx.conf:ro"
      - "./nginx/static/html:/usr/share/nginx/html"
      - "./nginx/static/js:/usr/share/nginx/html/js"
      - "./nginx/static/css:/usr/share/nginx/html/css"
      - "./nginx/static/uploads:/usr/share/nginx/html/uploads"
    networks:
      - frontend-net
      - backend-net
    depends_on: # <-- 이 부분을 추가하세요
      - fastapi
    environment:
      HOSTNAME: nginx-server

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.1
    container_name: elasticsearch-dev
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
    networks:
      - elk-net
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data

  filebeat:
    image: docker.elastic.co/beats/filebeat:8.12.1
    container_name: filebeat-dev
    user: root
    command: filebeat -e -strict.perms=false
    volumes:
      - ./filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/log:/var/log:ro
      - spring-logs:/app/logs:ro
    depends_on:
      - logstash
    networks:
      - elk-net
      - backend-net

  logstash:
    image: docker.elastic.co/logstash/logstash:8.12.1
    container_name: logstash-dev
    ports:
      - "5000:5000"
    volumes:
      - ./logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    depends_on:
      - elasticsearch
    networks:
      - elk-net

  kibana:
    image: docker.elastic.co/kibana/kibana:8.12.1
    container_name: kibana-dev
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - elk-net

volumes:
  mysql_main_data:
  elasticsearch-data:
  nginx-upload-data:
  spring-logs:

networks:
  frontend-net:
  backend-net:
  elk-net:
